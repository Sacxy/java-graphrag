plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.tekion'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configure compiler to preserve parameter names for ADK @Schema support
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

repositories {
    mavenCentral()
    // Google repository for ADK and AI dependencies
    google()
    // Maven Central snapshot repository for latest versions
    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Lombok for reducing boilerplate
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Google ADK for Java - Agent Development Kit
    implementation 'com.google.adk:google-adk:0.1.0'
    implementation 'com.google.adk:google-adk-dev:0.1.0'
    
    // ADK requires Guava for collections and utilities
    implementation 'com.google.guava:guava:32.1.3-jre'

    // Neo4j Database
    implementation 'org.neo4j.driver:neo4j-java-driver:5.14.0'

    // LangChain4j BOM for version management (keep for migration period)
    implementation platform('dev.langchain4j:langchain4j-bom:0.35.0')
    
    // LangChain4j for LLM integration (coordinate with ADK)
    implementation 'dev.langchain4j:langchain4j'
    implementation 'dev.langchain4j:langchain4j-open-ai'
    implementation 'dev.langchain4j:langchain4j-voyage-ai'

    // Apache Lucene for search capabilities
    implementation 'org.apache.lucene:lucene-core:9.11.1'
    implementation 'org.apache.lucene:lucene-analysis-common:9.11.1'
    implementation 'org.apache.lucene:lucene-queryparser:9.11.1'
    implementation 'org.apache.lucene:lucene-highlighter:9.11.1'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    
    // Metrics and Monitoring
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Circuit Breaker for resilience
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    
    // Agent Infrastructure
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    
    // Reactive Streams for async processing
    implementation 'io.projectreactor:reactor-core'
    implementation 'io.projectreactor.addons:reactor-extra'
}

// Task to set up environment for ADK development
task setupAdkEnv {
    doFirst {
        println "Setting up ADK environment variables..."
        System.setProperty('GOOGLE_API_KEY', 'AIzaSyAhfNWOyhRGKXQzjzDVuhTdBcINog_lBwI')
        println "âœ… GOOGLE_API_KEY configured for ADK"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    
    // Configure environment variables for ADK tests
    environment = [
        'GOOGLE_API_KEY': 'AIzaSyAhfNWOyhRGKXQzjzDVuhTdBcINog_lBwI'
    ]
    
    // Alternative: Set as JVM system property
    systemProperty 'GOOGLE_API_KEY', 'AIzaSyAhfNWOyhRGKXQzjzDVuhTdBcINog_lBwI'
    
    // Ensure ADK environment is set up before tests
    dependsOn setupAdkEnv
    
    // Enable debug output for troubleshooting
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = "full"
    }
    
    // JVM arguments for ADK compatibility
    jvmArgs = [
        '-Djava.util.logging.config.file=src/test/resources/logging.properties'
    ]
}
